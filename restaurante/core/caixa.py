# core/cliente.py

import threading
import time

class Caixa(threading.Thread):
    """
    Classe que representa um Caixa de pagamento em um restaurante virtual.
    Respons√°vel por processar pagamentos dos clientes de forma ass√≠ncrona.
    
    Atributos:
        id (int): Identificador √∫nico do caixa
        config (object): Configura√ß√µes do sistema
        fila_caixa: Fila de clientes aguardando pagamento
        estado (str): Estado atual (DISPON√çVEL/PROCESSANDO)
        _ativo (bool): Flag para controle da execu√ß√£o da thread
    """
    
    def __init__(self, id: int, fila_caixa, config):
        """
        Inicializa o caixa com suas configura√ß√µes b√°sicas
        
        Args:
            id: N√∫mero de identifica√ß√£o do caixa
            fila_caixa: Fila de clientes para atendimento
            config: Objeto de configura√ß√£o com par√¢metros do sistema
        """
        super().__init__(daemon=True)
        self.id = id
        self.config = config
        self.fila_caixa = fila_caixa
        self.estado = "DISPON√çVEL"
        self._ativo = True  # Controla o ciclo de vida da thread

    def run(self):
        """
        M√©todo principal da thread que processa clientes continuamente:
        1. Obt√©m pr√≥ximo cliente da fila
        2. Processa seu pagamento
        Executa enquanto o caixa estiver ativo
        """
        while self._ativo:
            try:
                cliente = self.fila_caixa.proximo_cliente()
                self.processar_pagamento(cliente)
            except:
                break  # Encerra em caso de erros na fila

    def processar_pagamento(self, cliente):
        """
        Executa o processo completo de pagamento:
        1. Atualiza estado para PROCESSANDO
        2. Simula tempo de processamento
        3. Libera cliente para sa√≠da
        
        Args:
            cliente: Objeto Cliente a ter pagamento processado
        """
        self.estado = "PROCESSANDO"
        print(f"üí∏ [Caixa {self.id}] Processando pagamento do Cliente {cliente.id}")
        
        # Simula tempo de processamento conforme configura√ß√£o
        time.sleep(self.config.tempoProcessamentoPagamento)
        
        print(f"‚úÖ [Caixa {self.id}] Pagamento do Cliente {cliente.id} conclu√≠do")
        cliente.estado = "SAINDO"  # Libera cliente para sair do sistema
        self.estado = "DISPON√çVEL"

    def parar(self):
        """
        Encerra a opera√ß√£o do caixa de forma segura
        """
        self._ativo = False